//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2021 January 05 08:49:42 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;

//#nullable enable
#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class GodotGo_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface IReady
        {
        #if NET5_0
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static IReady As<T>(in T target) => (IReady<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static IReady As<T>(ptr<T> target_ptr) => (IReady<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static IReady? As(object target) =>
                typeof(IReady<>).CreateInterfaceHandler<IReady>(target);
        #endif
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class IReady<T> : IReady
        {
            private T m_target = default;
            private readonly ptr<T> m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public IReady(in T target) => m_target = target;

            public IReady(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate void _ReadyByPtr(ptr<T> value);
            private delegate void _ReadyByVal(T value);

            private static readonly _ReadyByPtr s__ReadyByPtr;
            private static readonly _ReadyByVal s__ReadyByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void _Ready()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s__ReadyByPtr is null || !m_target_is_ptr)
                {
                    s__ReadyByVal(target);
                    return;
                }

                s__ReadyByPtr(m_target_ptr);
                return;
                
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static IReady()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("_Ready");

                if (!(extensionMethod is null))
                    s__ReadyByPtr = extensionMethod.CreateStaticDelegate(typeof(_ReadyByPtr)) as _ReadyByPtr;

                extensionMethod = targetType.GetExtensionMethod("_Ready");

                if (!(extensionMethod is null))
                    s__ReadyByVal = extensionMethod.CreateStaticDelegate(typeof(_ReadyByVal)) as _ReadyByVal;

                if (s__ReadyByPtr is null && s__ReadyByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement IReady._Ready method", new Exception("_Ready"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator IReady<T>(in ptr<T> target_ptr) => new IReady<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator IReady<T>(in T target) => new IReady<T>(target);

            // Enable comparisons between nil and IReady<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(IReady<T> value, NilType nil) => Activator.CreateInstance<IReady<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(IReady<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, IReady<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, IReady<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class GodotGo_IReadyExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.GodotGo_package.IReady target)
        {
            try
            {
                return ((go.GodotGo_package.IReady<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.GodotGo_package.IReady target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default;
                return false;
            }
        }

        //[GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        //public static object _(this go.GodotGo_package.IReady target, Type type)
        //{
        //    try
        //    {
        //        MethodInfo conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.GodotGo_package.IReady<>).GetExplicitGenericConversionOperator(type));

        //        if (conversionOperator is null)
        //            throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

        //        dynamic result = conversionOperator.Invoke(null, new object[] { target });
        //        return result?.Target;
        //    }
        //    catch (NotImplementedException ex)
        //    {
        //        throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
        //    }
        //}

        //[GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        //public static bool _(this go.GodotGo_package.IReady target, Type type, out object result)
        //{
        //    try
        //    {
        //        result = target._(type);
        //        return true;
        //    }
        //    catch (PanicException)
        //    {
        //        result = type.IsValueType ? Activator.CreateInstance(type) : null;
        //        return false;
        //    }
        //}
    }
}